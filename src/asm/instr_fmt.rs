#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Oper {
  // Invalid
  OPER_NONE,

  // Implied 16-bit register operands
  OPER_AX,
  OPER_CX,
  OPER_DX,
  OPER_BX,
  OPER_SP,
  OPER_BP,
  OPER_SI,
  OPER_DI,

  // Implied 8-bit register operands
  OPER_AL,
  OPER_CL,
  OPER_DL,
  OPER_BL,
  OPER_AH,
  OPER_CH,
  OPER_DH,
  OPER_BH,

  // Implied segment regsiter operands
  OPER_ES,
  OPER_CS,
  OPER_SS,
  OPER_DS,

  // Implied others
  OPER_FLAGS,
  OPER_LIT1,
  OPER_LIT3,

  // Implied string operations operands
  OPER_SRC8,
  OPER_SRC16,
  OPER_DST8,
  OPER_DST16,

  // Explicit register operands
  OPER_R8,     // Register field from ModRM byte
  OPER_R16,    // Register field from ModRM byte
  OPER_SREG,   // Second register field from ModRM byte (interpreted as an SREG)

  // Explicit memory operands
  OPER_M8,     // Memory operand to address 8-bit from ModRM (no reg allowed)
  OPER_M16,    // Memory operand to address 16-bit from ModRM (no reg allowed)
  OPER_M32,    // Memory operand to address 32-bit from ModRM (no reg allowed)

  // Explicit register or memory operands (modrm)
  OPER_RM8,    // Either Register of memory operand, always 8-bit
  OPER_RM16,   // Either Register of memory operand, always 16-bit

  // Explicit immediate data
  OPER_IMM8,     // Immediate value, sized 8-bits
  OPER_IMM8_EXT, // Immediate value, sized 8-bits, sign-extended to 16-bits
  OPER_IMM16,    // Immediate value, sized 16-bits

  // Explicit far32 jump immediate
  OPER_FAR32,  // Immediate value, sized 32-bits

  // Explicit 16-bit immediate used as a memory offset into DS
  OPER_MOFF8,  // 16-bit imm loading 8-bit value
  OPER_MOFF16, // 16-bit imm loading 16-bit value

  // Explicit relative offsets (branching / calls)
  OPER_REL8,   // Sign-extended to 16-bit and added to address after fetch
  OPER_REL16,  // Added to address after fetch
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Opcode {
  OP_AAA,
  OP_AAS,
  OP_ADC,
  OP_ADD,
  OP_AND,
  OP_CALL,
  OP_CALLF,
  OP_CBW,
  OP_CLC,
  OP_CLD,
  OP_CLI,
  OP_CMC,
  OP_CMP,
  OP_CMPS,
  OP_CWD,
  OP_DAA,
  OP_DAS,
  OP_DEC,
  OP_DIV,
  OP_ENTER,
  OP_HLT,
  OP_IMUL,
  OP_IMUL_TRUNC,
  OP_IN,
  OP_INC,
  OP_INS,
  OP_INT,
  OP_INTO,
  OP_INVAL,
  OP_IRET,
  OP_JA,
  OP_JAE,
  OP_JB,
  OP_JBE,
  OP_JCXZ,
  OP_JE,
  OP_JG,
  OP_JGE,
  OP_JL,
  OP_JLE,
  OP_JMP,
  OP_JMPF,
  OP_JNE,
  OP_JNO,
  OP_JNP,
  OP_JNS,
  OP_JO,
  OP_JP,
  OP_JS,
  OP_LAHF,
  OP_LDS,
  OP_LEA,
  OP_LEAVE,
  OP_LES,
  OP_LODS,
  OP_LOOP,
  OP_LOOPE,
  OP_LOOPNE,
  OP_MOV,
  OP_MOVS,
  OP_MUL,
  OP_NEG,
  OP_NOP,
  OP_NOT,
  OP_OR,
  OP_OUT,
  OP_OUTS,
  OP_POP,
  OP_POPA,
  OP_POPF,
  OP_PUSH,
  OP_PUSHA,
  OP_PUSHF,
  OP_RCL,
  OP_RCR,
  OP_RET,
  OP_RETF,
  OP_ROL,
  OP_ROR,
  OP_SAHF,
  OP_SAR,
  OP_SBB,
  OP_SCAS,
  OP_SETO,
  OP_SETNO,
  OP_SETA,
  OP_SETAE,
  OP_SETB,
  OP_SETBE,
  OP_SETE,
  OP_SETG,
  OP_SETGE,
  OP_SETL,
  OP_SETLE,
  OP_SETP,
  OP_SETS,
  OP_SETNE,
  OP_SETNP,
  OP_SETNS,
  OP_SHL,
  OP_SHR,
  OP_STC,
  OP_STD,
  OP_STI,
  OP_STOS,
  OP_SUB,
  OP_TEST,
  OP_XCHG,
  OP_XLAT,
  OP_XOR,
}

impl Opcode {
  pub fn name(&self) -> &'static str {
    match self {
      Opcode::OP_AAA =>     "aaa",
      Opcode::OP_AAS =>     "aas",
      Opcode::OP_ADC =>     "adc",
      Opcode::OP_ADD =>     "add",
      Opcode::OP_AND =>     "and",
      Opcode::OP_CALL =>    "call",
      Opcode::OP_CALLF =>   "callf",
      Opcode::OP_CBW =>     "cbw",
      Opcode::OP_CLC =>     "clc",
      Opcode::OP_CLD =>     "cld",
      Opcode::OP_CLI =>     "cli",
      Opcode::OP_CMC =>     "cmc",
      Opcode::OP_CMP =>     "cmp",
      Opcode::OP_CMPS =>    "cmps",
      Opcode::OP_CWD =>     "cwd",
      Opcode::OP_DAA =>     "daa",
      Opcode::OP_DAS =>     "das",
      Opcode::OP_DEC =>     "dec",
      Opcode::OP_DIV =>     "div",
      Opcode::OP_ENTER =>   "enter",
      Opcode::OP_HLT =>     "hlt",
      Opcode::OP_IMUL =>    "imul",
      Opcode::OP_IMUL_TRUNC => "imul",
      Opcode::OP_IN =>      "in",
      Opcode::OP_INC =>     "inc",
      Opcode::OP_INS =>     "ins",
      Opcode::OP_INT =>     "int",
      Opcode::OP_INTO =>    "into",
      Opcode::OP_INVAL =>   "inval",
      Opcode::OP_IRET =>    "iret",
      Opcode::OP_JA =>      "ja",
      Opcode::OP_JAE =>     "jae",
      Opcode::OP_JB =>      "jb",
      Opcode::OP_JBE =>     "jbe",
      Opcode::OP_JCXZ =>    "jcxz",
      Opcode::OP_JE =>      "je",
      Opcode::OP_JG =>      "jg",
      Opcode::OP_JGE =>     "jge",
      Opcode::OP_JL =>      "jl",
      Opcode::OP_JLE =>     "jle",
      Opcode::OP_JMP =>     "jmp",
      Opcode::OP_JMPF =>    "jmpf",
      Opcode::OP_JNE =>     "jne",
      Opcode::OP_JNO =>     "jno",
      Opcode::OP_JNP =>     "jnp",
      Opcode::OP_JNS =>     "jns",
      Opcode::OP_JO =>      "jo",
      Opcode::OP_JP =>      "jp",
      Opcode::OP_JS =>      "js",
      Opcode::OP_LAHF =>    "lahf",
      Opcode::OP_LDS =>     "lds",
      Opcode::OP_LEA =>     "lea",
      Opcode::OP_LEAVE =>   "leave",
      Opcode::OP_LES =>     "les",
      Opcode::OP_LODS =>    "lods",
      Opcode::OP_LOOP =>    "loop",
      Opcode::OP_LOOPE =>   "loope",
      Opcode::OP_LOOPNE =>  "loopne",
      Opcode::OP_MOV =>     "mov",
      Opcode::OP_MOVS =>    "movs",
      Opcode::OP_MUL =>     "mul",
      Opcode::OP_NEG =>     "neg",
      Opcode::OP_NOP =>     "nop",
      Opcode::OP_NOT =>     "not",
      Opcode::OP_OR =>      "or",
      Opcode::OP_OUT =>     "out",
      Opcode::OP_OUTS =>    "outs",
      Opcode::OP_POP =>     "pop",
      Opcode::OP_POPA =>    "popa",
      Opcode::OP_POPF =>    "popf",
      Opcode::OP_PUSH =>    "push",
      Opcode::OP_PUSHA =>   "pusha",
      Opcode::OP_PUSHF =>   "pushf",
      Opcode::OP_RCL =>     "rcl",
      Opcode::OP_RCR =>     "rcr",
      Opcode::OP_RET =>     "ret",
      Opcode::OP_RETF =>    "retf",
      Opcode::OP_ROL =>     "rol",
      Opcode::OP_ROR =>     "ror",
      Opcode::OP_SAHF =>    "sahf",
      Opcode::OP_SAR =>     "sar",
      Opcode::OP_SBB =>     "sbb",
      Opcode::OP_SCAS =>    "scas",
      Opcode::OP_SETO =>    "seto",
      Opcode::OP_SETNO =>   "setno",
      Opcode::OP_SETB =>    "setb",
      Opcode::OP_SETAE =>   "setae",
      Opcode::OP_SETE =>    "sete",
      Opcode::OP_SETNE =>   "setne",
      Opcode::OP_SETBE =>   "setbe",
      Opcode::OP_SETA =>    "seta",
      Opcode::OP_SETS =>    "sets",
      Opcode::OP_SETNS =>   "setns",
      Opcode::OP_SETP =>    "setp",
      Opcode::OP_SETNP =>   "setnp",
      Opcode::OP_SETL =>    "setl",
      Opcode::OP_SETGE =>   "setge",
      Opcode::OP_SETLE =>   "setle",
      Opcode::OP_SETG =>    "setg",
      Opcode::OP_SHL =>     "shl",
      Opcode::OP_SHR =>     "shr",
      Opcode::OP_STC =>     "stc",
      Opcode::OP_STD =>     "std",
      Opcode::OP_STI =>     "sti",
      Opcode::OP_STOS =>    "stos",
      Opcode::OP_SUB =>     "sub",
      Opcode::OP_TEST =>    "test",
      Opcode::OP_XCHG =>    "xchg",
      Opcode::OP_XLAT =>    "xlat",
      Opcode::OP_XOR =>     "xor",
    }
  }
}

#[derive(Debug)]
pub struct InstrFmt {
  pub op:    Opcode,
  pub op1:   i16, // byte or -1 if not used
  pub op2:   i16, // byte or -1 if not used
  pub oper:  [Oper; 3],
  pub hidden: u8,
}

impl InstrFmt {
  pub fn requires_modrm(&self) -> bool {
    for o in &self.oper {
      match o {
        Oper::OPER_R8   => return true,
        Oper::OPER_R16  => return true,
        Oper::OPER_SREG => return true,
        Oper::OPER_M8   => return true,
        Oper::OPER_M16  => return true,
        Oper::OPER_M32  => return true,
        Oper::OPER_RM8  => return true,
        Oper::OPER_RM16 => return true,
        _ => (),
      }
    }
    false
  }
}

const INSTR_TBL: &[InstrFmt] = &[
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x00,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x01,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x02,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x03,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x04,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x05,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x06,     op2: -1,   oper: [Oper::OPER_ES,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x07,     op2: -1,   oper: [Oper::OPER_ES,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x08,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x09,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x0a,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x0b,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x0c,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x0d,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x0e,     op2: -1,   oper: [Oper::OPER_CS,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETO,      op1: 0x0f,     op2: 0x90, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETNO,     op1: 0x0f,     op2: 0x91, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETB,      op1: 0x0f,     op2: 0x92, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETAE,     op1: 0x0f,     op2: 0x93, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETE,      op1: 0x0f,     op2: 0x94, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETNE,     op1: 0x0f,     op2: 0x95, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETBE,     op1: 0x0f,     op2: 0x96, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETA,      op1: 0x0f,     op2: 0x97, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETS,      op1: 0x0f,     op2: 0x98, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETNS,     op1: 0x0f,     op2: 0x99, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETP,      op1: 0x0f,     op2: 0x9a, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETNP,     op1: 0x0f,     op2: 0x9b, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETL,      op1: 0x0f,     op2: 0x9c, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETGE,     op1: 0x0f,     op2: 0x9d, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETLE,     op1: 0x0f,     op2: 0x9e, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SETG,      op1: 0x0f,     op2: 0x9f, oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x10,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x11,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x12,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x13,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x14,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x15,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x16,     op2: -1,   oper: [Oper::OPER_SS,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x17,     op2: -1,   oper: [Oper::OPER_SS,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x18,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x19,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x1a,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x1b,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x1c,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x1d,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x1e,     op2: -1,   oper: [Oper::OPER_DS,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x1f,     op2: -1,   oper: [Oper::OPER_DS,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x20,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x21,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x22,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x23,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x24,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x25,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  // SEGMENT OVERRIDE: ES
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x26,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DAA,       op1: 0x27,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x28,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x29,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x2a,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x2b,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x2c,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x2d,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  // SEGMENT OVERRIDE: CS
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x2e,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DAS,       op1: 0x2f,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x30,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x31,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x32,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x33,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x34,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x35,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  // SEGMENT OVERRIDE: SS
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x36,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AAA,       op1: 0x37,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_AH,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x38,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x39,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x3a,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x3b,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x3c,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x3d,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  // SEGMENT OVERRIDE: DS
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x3e,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AAS,       op1: 0x3f,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_AH,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x40,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x41,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x42,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x43,     op2: -1,   oper: [Oper::OPER_BX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x44,     op2: -1,   oper: [Oper::OPER_SP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x45,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x46,     op2: -1,   oper: [Oper::OPER_SI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0x47,     op2: -1,   oper: [Oper::OPER_DI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x48,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x49,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x4a,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x4b,     op2: -1,   oper: [Oper::OPER_BX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x4c,     op2: -1,   oper: [Oper::OPER_SP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x4d,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x4e,     op2: -1,   oper: [Oper::OPER_SI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0x4f,     op2: -1,   oper: [Oper::OPER_DI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x50,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x51,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x52,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x53,     op2: -1,   oper: [Oper::OPER_BX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x54,     op2: -1,   oper: [Oper::OPER_SP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x55,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x56,     op2: -1,   oper: [Oper::OPER_SI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x57,     op2: -1,   oper: [Oper::OPER_DI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x58,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x59,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x5a,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x5b,     op2: -1,   oper: [Oper::OPER_BX,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x5c,     op2: -1,   oper: [Oper::OPER_SP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x5d,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x5e,     op2: -1,   oper: [Oper::OPER_SI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x5f,     op2: -1,   oper: [Oper::OPER_DI,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSHA,     op1: 0x60,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POPA,      op1: 0x61,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x62,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x63,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x64,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x65,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x66,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x67,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x68,     op2: -1,   oper: [Oper::OPER_IMM16,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_IMUL_TRUNC,op1: 0x69,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_IMM16],     hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0x6a,     op2: -1,   oper: [Oper::OPER_IMM8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_IMUL_TRUNC,op1: 0x6b,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_IMM8],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INS,       op1: 0x6c,     op2: -1,   oper: [Oper::OPER_M8,      Oper::OPER_DX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INS,       op1: 0x6d,     op2: -1,   oper: [Oper::OPER_M16,     Oper::OPER_DX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OUTS,      op1: 0x6e,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_M8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OUTS,      op1: 0x6f,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_M16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JO,        op1: 0x70,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JNO,       op1: 0x71,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JB,        op1: 0x72,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JAE,       op1: 0x73,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JE,        op1: 0x74,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JNE,       op1: 0x75,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JBE,       op1: 0x76,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JA,        op1: 0x77,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JS,        op1: 0x78,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JNS,       op1: 0x79,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JP,        op1: 0x7a,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JNP,       op1: 0x7b,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JL,        op1: 0x7c,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JGE,       op1: 0x7d,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JLE,       op1: 0x7e,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JG,        op1: 0x7f,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x80,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x80,     op2:  1,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x80,     op2:  2,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x80,     op2:  3,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x80,     op2:  4,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x80,     op2:  5,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x80,     op2:  6,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x80,     op2:  7,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x81,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x81,     op2:  1,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x81,     op2:  2,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x81,     op2:  3,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x81,     op2:  4,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x81,     op2:  5,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x81,     op2:  6,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x81,     op2:  7,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x82,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x82,     op2:  1,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x82,     op2:  2,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x82,     op2:  3,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x82,     op2:  4,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x82,     op2:  5,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x82,     op2:  6,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x82,     op2:  7,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADD,       op1: 0x83,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OR,        op1: 0x83,     op2:  1,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ADC,       op1: 0x83,     op2:  2,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SBB,       op1: 0x83,     op2:  3,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_AND,       op1: 0x83,     op2:  4,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SUB,       op1: 0x83,     op2:  5,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XOR,       op1: 0x83,     op2:  6,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMP,       op1: 0x83,     op2:  7,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0x84,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0x85,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x86,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x87,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0x88,     op2: -1,   oper: [Oper::OPER_RM8,     Oper::OPER_R8,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0x89,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_R16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0x8a,     op2: -1,   oper: [Oper::OPER_R8,      Oper::OPER_RM8,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0x8b,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0x8c,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_SREG,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_LEA,       op1: 0x8d,     op2: -1,   oper: [Oper::OPER_R16,     Oper::OPER_M16,     Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0x8e,     op2: -1,   oper: [Oper::OPER_SREG,    Oper::OPER_RM16,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_POP,       op1: 0x8f,     op2: -1,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_NOP,       op1: 0x90,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x91,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x92,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x93,     op2: -1,   oper: [Oper::OPER_BX,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x94,     op2: -1,   oper: [Oper::OPER_SP,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x95,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x96,     op2: -1,   oper: [Oper::OPER_SI,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XCHG,      op1: 0x97,     op2: -1,   oper: [Oper::OPER_DI,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CBW,       op1: 0x98,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_AL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CWD,       op1: 0x99,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CALLF,     op1: 0x9a,     op2: -1,   oper: [Oper::OPER_FAR32,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0x9b,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSHF,     op1: 0x9c,     op2: -1,   oper: [Oper::OPER_FLAGS,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_POPF,      op1: 0x9d,     op2: -1,   oper: [Oper::OPER_FLAGS,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_SAHF,      op1: 0x9e,     op2: -1,   oper: [Oper::OPER_AH,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_LAHF,      op1: 0x9f,     op2: -1,   oper: [Oper::OPER_AH,      Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xa0,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_MOFF8,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xa1,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_MOFF16,  Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xa2,     op2: -1,   oper: [Oper::OPER_MOFF8,   Oper::OPER_AL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xa3,     op2: -1,   oper: [Oper::OPER_MOFF16,  Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOVS,      op1: 0xa4,     op2: -1,   oper: [Oper::OPER_DST8,    Oper::OPER_SRC8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOVS,      op1: 0xa5,     op2: -1,   oper: [Oper::OPER_DST16,   Oper::OPER_SRC16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMPS,      op1: 0xa6,     op2: -1,   oper: [Oper::OPER_DST8,    Oper::OPER_SRC8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMPS,      op1: 0xa7,     op2: -1,   oper: [Oper::OPER_DST16,   Oper::OPER_SRC16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0xa8,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0xa9,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_STOS,      op1: 0xaa,     op2: -1,   oper: [Oper::OPER_DST8,    Oper::OPER_AL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_STOS,      op1: 0xab,     op2: -1,   oper: [Oper::OPER_DST16,   Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_LODS,      op1: 0xac,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_SRC8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_LODS,      op1: 0xad,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_SRC16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SCAS,      op1: 0xae,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_DST8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SCAS,      op1: 0xaf,     op2: -1,   oper: [Oper::OPER_DST16,   Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb0,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb1,     op2: -1,   oper: [Oper::OPER_CL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb2,     op2: -1,   oper: [Oper::OPER_DL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb3,     op2: -1,   oper: [Oper::OPER_BL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb4,     op2: -1,   oper: [Oper::OPER_AH,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb5,     op2: -1,   oper: [Oper::OPER_CH,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb6,     op2: -1,   oper: [Oper::OPER_DH,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb7,     op2: -1,   oper: [Oper::OPER_BH,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb8,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xb9,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xba,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xbb,     op2: -1,   oper: [Oper::OPER_BX,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xbc,     op2: -1,   oper: [Oper::OPER_SP,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xbd,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xbe,     op2: -1,   oper: [Oper::OPER_SI,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xbf,     op2: -1,   oper: [Oper::OPER_DI,      Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROL,       op1: 0xc0,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROR,       op1: 0xc0,     op2:  1,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCL,       op1: 0xc0,     op2:  2,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCR,       op1: 0xc0,     op2:  3,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xc0,     op2:  4,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHR,       op1: 0xc0,     op2:  5,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xc0,     op2:  6,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SAR,       op1: 0xc0,     op2:  7,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROL,       op1: 0xc1,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROR,       op1: 0xc1,     op2:  1,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCL,       op1: 0xc1,     op2:  2,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCR,       op1: 0xc1,     op2:  3,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xc1,     op2:  4,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHR,       op1: 0xc1,     op2:  5,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xc1,     op2:  6,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SAR,       op1: 0xc1,     op2:  7,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM8_EXT,Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RET,       op1: 0xc2,     op2: -1,   oper: [Oper::OPER_IMM16,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RET,       op1: 0xc3,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_LES,       op1: 0xc4,     op2: -1,   oper: [Oper::OPER_ES,      Oper::OPER_R16,     Oper::OPER_M32],       hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_LDS,       op1: 0xc5,     op2: -1,   oper: [Oper::OPER_DS,      Oper::OPER_R16,     Oper::OPER_M32],       hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xc6,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MOV,       op1: 0xc7,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ENTER,     op1: 0xc8,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_IMM16,   Oper::OPER_IMM8],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_LEAVE,     op1: 0xc9,     op2: -1,   oper: [Oper::OPER_BP,      Oper::OPER_SP,      Oper::OPER_NONE],      hidden: 0x3 },
  InstrFmt {  op: Opcode::OP_RETF,      op1: 0xca,     op2: -1,   oper: [Oper::OPER_IMM16,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RETF,      op1: 0xcb,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INT,       op1: 0xcc,     op2: -1,   oper: [Oper::OPER_LIT3,    Oper::OPER_FLAGS,   Oper::OPER_NONE],      hidden: 0x2 },
  InstrFmt {  op: Opcode::OP_INT,       op1: 0xcd,     op2: -1,   oper: [Oper::OPER_IMM8,    Oper::OPER_FLAGS,   Oper::OPER_NONE],      hidden: 0x2 },
  InstrFmt {  op: Opcode::OP_INTO,      op1: 0xce,     op2: -1,   oper: [Oper::OPER_FLAGS,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_IRET,      op1: 0xcf,     op2: -1,   oper: [Oper::OPER_FLAGS,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_ROL,       op1: 0xd0,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROR,       op1: 0xd0,     op2:  1,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCL,       op1: 0xd0,     op2:  2,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCR,       op1: 0xd0,     op2:  3,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd0,     op2:  4,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHR,       op1: 0xd0,     op2:  5,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd0,     op2:  6,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SAR,       op1: 0xd0,     op2:  7,   oper: [Oper::OPER_RM8,     Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROL,       op1: 0xd1,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROR,       op1: 0xd1,     op2:  1,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCL,       op1: 0xd1,     op2:  2,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCR,       op1: 0xd1,     op2:  3,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd1,     op2:  4,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHR,       op1: 0xd1,     op2:  5,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd1,     op2:  6,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SAR,       op1: 0xd1,     op2:  7,   oper: [Oper::OPER_RM16,    Oper::OPER_LIT1,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROL,       op1: 0xd2,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROR,       op1: 0xd2,     op2:  1,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCL,       op1: 0xd2,     op2:  2,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCR,       op1: 0xd2,     op2:  3,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd2,     op2:  4,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHR,       op1: 0xd2,     op2:  5,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd2,     op2:  6,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SAR,       op1: 0xd2,     op2:  7,   oper: [Oper::OPER_RM8,     Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROL,       op1: 0xd3,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_ROR,       op1: 0xd3,     op2:  1,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCL,       op1: 0xd3,     op2:  2,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_RCR,       op1: 0xd3,     op2:  3,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd3,     op2:  4,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHR,       op1: 0xd3,     op2:  5,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SHL,       op1: 0xd3,     op2:  6,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_SAR,       op1: 0xd3,     op2:  7,   oper: [Oper::OPER_RM16,    Oper::OPER_CL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xd4,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xd5,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xd6,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_XLAT,      op1: 0xd7,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_DS,      Oper::OPER_BX],        hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xd8,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xd9,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xda,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xdb,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xdc,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xdd,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xde,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xdf,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_LOOPNE,    op1: 0xe0,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_REL8,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_LOOPE,     op1: 0xe1,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_REL8,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_LOOP,      op1: 0xe2,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_REL8,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_JCXZ,      op1: 0xe3,     op2: -1,   oper: [Oper::OPER_CX,      Oper::OPER_REL8,    Oper::OPER_NONE],      hidden: 0x1 },
  InstrFmt {  op: Opcode::OP_IN,        op1: 0xe4,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_IN,        op1: 0xe5,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OUT,       op1: 0xe6,     op2: -1,   oper: [Oper::OPER_IMM8,    Oper::OPER_AL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OUT,       op1: 0xe7,     op2: -1,   oper: [Oper::OPER_IMM8,    Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CALL,      op1: 0xe8,     op2: -1,   oper: [Oper::OPER_REL16,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JMP,       op1: 0xe9,     op2: -1,   oper: [Oper::OPER_REL16,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JMPF,      op1: 0xea,     op2: -1,   oper: [Oper::OPER_FAR32,   Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JMP,       op1: 0xeb,     op2: -1,   oper: [Oper::OPER_REL8,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_IN,        op1: 0xec,     op2: -1,   oper: [Oper::OPER_AL,      Oper::OPER_DX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_IN,        op1: 0xed,     op2: -1,   oper: [Oper::OPER_AX,      Oper::OPER_DX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OUT,       op1: 0xee,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_AL,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_OUT,       op1: 0xef,     op2: -1,   oper: [Oper::OPER_DX,      Oper::OPER_AX,      Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xf0,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xf1,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  // REPNE: 0xf2, REPE: 0xf3
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xf2,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INVAL,     op1: 0xf3,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_HLT,       op1: 0xf4,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CMC,       op1: 0xf5,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0xf6,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0xf6,     op2:  1,   oper: [Oper::OPER_RM8,     Oper::OPER_IMM8,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_NOT,       op1: 0xf6,     op2:  2,   oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_NEG,       op1: 0xf6,     op2:  3,   oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MUL,       op1: 0xf6,     op2:  4,   oper: [Oper::OPER_AX,      Oper::OPER_AL,      Oper::OPER_RM8],       hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_IMUL,      op1: 0xf6,     op2:  5,   oper: [Oper::OPER_AX,      Oper::OPER_AL,      Oper::OPER_RM8],       hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DIV,       op1: 0xf6,     op2:  6,   oper: [Oper::OPER_AH,      Oper::OPER_AL,      Oper::OPER_RM8],       hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DIV,       op1: 0xf6,     op2:  7,   oper: [Oper::OPER_AH,      Oper::OPER_AL,      Oper::OPER_RM8],       hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0xf7,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_TEST,      op1: 0xf7,     op2:  1,   oper: [Oper::OPER_RM16,    Oper::OPER_IMM16,   Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_NOT,       op1: 0xf7,     op2:  2,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_NEG,       op1: 0xf7,     op2:  3,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_MUL,       op1: 0xf7,     op2:  4,   oper: [Oper::OPER_DX,      Oper::OPER_AX,      Oper::OPER_RM16],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_IMUL,      op1: 0xf7,     op2:  5,   oper: [Oper::OPER_DX,      Oper::OPER_AX,      Oper::OPER_RM16],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DIV,       op1: 0xf7,     op2:  6,   oper: [Oper::OPER_DX,      Oper::OPER_AX,      Oper::OPER_RM16],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DIV,       op1: 0xf7,     op2:  7,   oper: [Oper::OPER_DX,      Oper::OPER_AX,      Oper::OPER_RM16],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CLC,       op1: 0xf8,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_STC,       op1: 0xf9,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CLI,       op1: 0xfa,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_STI,       op1: 0xfb,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CLD,       op1: 0xfc,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_STD,       op1: 0xfd,     op2: -1,   oper: [Oper::OPER_NONE,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0xfe,     op2:  0,   oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0xfe,     op2:  1,   oper: [Oper::OPER_RM8,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_INC,       op1: 0xff,     op2:  0,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_DEC,       op1: 0xff,     op2:  1,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CALL,      op1: 0xff,     op2:  2,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_CALLF,     op1: 0xff,     op2:  3,   oper: [Oper::OPER_M32,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JMP,       op1: 0xff,     op2:  4,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_JMPF,      op1: 0xff,     op2:  5,   oper: [Oper::OPER_M32,     Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
  InstrFmt {  op: Opcode::OP_PUSH,      op1: 0xff,     op2:  6,   oper: [Oper::OPER_RM16,    Oper::OPER_NONE,    Oper::OPER_NONE],      hidden: 0x0 },
];

#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Error {
  NotFound,
  NeedOpcode2,
  NeedOpcode2Ext0F,
}

pub fn lookup(opcode1: u8, opcode2: Option<u8>) -> Result<&'static InstrFmt, Error> {
  // TODO FIXME .. VERY INEFFICENT O(N) SEARCH
  // WE COULD DO A BINARY SEARCH, BUT REALLY WE SHOULD JUST USE A TABLE
  // THAT'S MUCH MORE EFFICENT FOR O(1) LOOKUPS. WE COULD EITHER BUILD
  // ANOTHER TABLE AT RUNTIME.. OR MORE IDEALLY, JUST REFORMT THE CURRENT
  // TABLE. THE PRIMARY CHALLENGE IS THE OPCODE2 THE WE OCCASIONALLY HAVE..
  // BUT NOT ALWAYS..

  let op1 = opcode1 as i16;
  let op2 = opcode2.map(|x| x as i16).unwrap_or(-1);

  let mut op1_found = false;
  for fmt in INSTR_TBL {
    if op1 != fmt.op1 {
      continue;
    }
    op1_found = true;
    if op2 == fmt.op2 {
      return Ok(fmt);
    }
  }

  if op1_found && op2 == -1 {
    if op1 != 0x0f {
      return Err(Error::NeedOpcode2)
    } else {
      return Err(Error::NeedOpcode2Ext0F)
    }
  }

  Err(Error::NotFound)
}

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn test() {
    assert_eq!(lookup(0x05, None).unwrap().op, Opcode::OP_ADD);
    assert_eq!(lookup(0x05, Some(0x05)).err().unwrap(), Error::NotFound);
    assert_eq!(lookup(0x80, None).err().unwrap(), Error::NeedOpcode2);
    assert_eq!(lookup(0x80, Some(0x01)).unwrap().op, Opcode::OP_OR);
  }
}
